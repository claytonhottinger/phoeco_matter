#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('phoeco_matter:server');
var http = require('http');
var path = require('path');
//initial player hand
var playerOneHand = require(path.join(__dirname, '../public/data/cards.json'));

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * initialize socket listening, send out board status to clients
 */

var io = require('socket.io').listen(server);
var socketconnections = [];
/**
 *initial board state as represented by an array (length 6) of arrays (length 8)
 */
var gameState = [[[],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]]];

/**
 * Initial player resources
 * @type {{life: number, command: number, maxCommand: number, mana: number, maxMana: number}}
 */

var playerOneResources = {
  life: 30,
  command: 0,
  maxCommand: 0,
  mana: 0,
  maxMana: 0
};
var playerTwoResources = {
  life: 30,
  command: 0,
  maxCommand: 0,
  mana: 0,
  maxMana: 0
};

var activeCardID = 0;
var activeCards = [];
/**
 *when a client connects, add its socket id to an array and send the game state to the client
 *If that array already has two socket id's, send the client an error
 */
io.sockets.on('connection', function(socket){
  if(socketconnections.length == 0){
    socketconnections.push(socket.id);
    socket.emit('response', gameState);
    socket.emit('p1HandResponse', playerOneHand);
    socket.emit('resourceResponse', playerOneResources);
  } else if (socketconnections.length ==1){
    socketconnections.push(socket.id);
    socket.emit('response', gameState);
    socket.emit('p1HandResponse', playerOneHand);
    socket.emit('resourceResponse', playerOneResources);
    socket.emit('oops', 1);
  }else {
      socket.emit('oops', 2);
  }


/**When the card is moved on a client, check to see if their socket id matches the first client to connect
 *If yes, use the active cards array to find where the card has been moved in the potential new gamestate,
 *    if that location is legal (aka within the move points of the card), then set the game state array to the one
 *      they sent, then send that updated gamestate to all clients
 *    if not, then send an error to the client and the correct gamestate to all clients,
 *If no, send the client an error and the current gamestate to all clients
 */
  socket.on('sort', function(data){
    //if it is the first player connected
    if(socket.id == socketconnections[0]){
      //cycle through each row of the gameboard
      for(var i = 0; i<data.length; i++){
        //cycle through each column of the gameboard
        for(var k = 0; k<data[i].length; k++){
          //if there's a card in the current spot of the gameboard
          if(data[i][k][0]) {
            //cycle through the active cards array
            for (var j = 0; j < activeCards.length; j++) {
              //only perform movement check if the ID matches, and if it is a card that's moved
              if (activeCards[j].ID === data[i][k][0].ID &&
                (activeCards[j].row - i != 0 || activeCards[j].column - k != 0)
              ) {
                //if the distance the card has moved is less than its movement points
                if (Math.abs(activeCards[j].row - i) <= activeCards[j].move
                  && Math.abs(activeCards[j].column - k) <= activeCards[j].move) {
                  //set the new position within the active cards array
                  activeCards[j].row = i;
                  activeCards[j].column = k;
                  //set the new gamestate
                  gameState = data;
                  //send the new gamestate to all clients
                  io.emit('response', gameState);
                  return
                } else {
                  //if the move is not legal, send the correct gamestate along with an error
                  io.emit('response', gameState);
                  socket.emit('oops', 5);
                  return
                }
              }
            }
          }
        };
      }

    } else {
      io.emit('response', gameState);
      socket.emit('oops', 1);
    }
  });
  /**
   * When a new card is played to the board, iterate through the received gameboard data to find where it has been played
   * If the new card was played on the homerow (data.gameBoard[5]), send the new game data to the clients.
   * If the new card was not played on the homerow, send the correct game data to the clients, along with an error
   */
  socket.on('newCard', function(data){
    //for loop iterates through each row of the gameboard sent from the client
    for(var i = 0; i< data.gameBoard.length; i++){
      //forEach goes through the current row of the gameboard
      data.gameBoard[i].forEach(function(element, index) {
        //if the space in the iteration is occupied by a card
        if (element[0]) {
          //if the fromHand property is not 0 and the current row is 5 (the homerow)
          if (element[0].fromHand && i == 5) {
            console.log('new card pass');
            element[0].fromHand = 0;
            element[0].row = 5;
            element[0].column = index;
            element[0].ID = activeCardID;
            activeCardID++;
            activeCards.push(element[0]);
            //remove the corresponding card from the hand
            var playedCard = playerOneHand.splice(data.prevIndex, 1);
            //set the gameboard to what the client sent
            gameState = data.gameBoard;
            //send the played card, the new player hand, and the gameboard to all clients, and stop the iteration
            io.emit('newCardResponse', playedCard[0]);
            io.emit('p1HandResponse', playerOneHand);
            io.emit('response', data.gameBoard);
            return
            //if the card is found not on the homerow, send an error and gamestate data
          } else if (element[0].fromHand) {
            console.log('new card fail');
            io.emit('p1HandResponse', playerOneHand);
            io.emit('response', gameState);
            socket.emit('oops', 4);
            return
          }
        }
      });
    }
  });
  /**
   * Plans to move new card validation to the server, not currently in use
   * Emits the server's version of the player hand to all clients when it receives a signal
   */
  socket.on('p1Hand', function(data){
    playerOneHand = data;
    io.emit('p1HandResponse', playerOneHand);
  });
  /**
   * Possible avenue for handling multiple players taking turns, not currently in use
   */
  socket.on('isItMyTurn?', function(){
    if(socket.id == socketconnections[0]){
      socket.emit('isItMyTurn?', true);
    } else {
      socket.emit('isItMyTurn?', false);
    }
  });

  /**
   * Plans to move new card validation to the server, not currently in use
   * Checks the played card's costs against available resources,
   *    sends the new hand if a valid play
   *    sends an error if not
   *
   * Sends an error if a non-active client tries to play a card
   */
  socket.on('cardPlayable', function(data){
    if(socket.id == socketconnections[0]){
      if(data.mana <= playerOneResources.mana && data.command <= playerOneResources.command){
        for(var i = 0; i < playerOneHand.length; i++){
          if(playerOneHand[i].title === data.title){
            console.log('hand emitted');
            playerOneHand[i].playable = 'playable';
            socket.emit('p1HandResponse', playerOneHand);
          }
        }
      } else {
        socket.emit('oops', 3);
      }
    } else {
      socket.emit('oops', 1);
    }
  });
  /**
   * Updates and sends the current resources when the active client updates them
   */
  socket.on('resource', function(data){
    if(socket.id == socketconnections[0]){
      playerOneResources = data;
      io.emit('resourceResponse', playerOneResources);
    } else {
      io.emit('resourceResponse', playerOneResources);
      socket.emit('oops', 1);
    }

  });
/**
 *When a client disconnects from the server, remove that client's socket id from the array
 */
  socket.on('disconnect', function(){
    for(var i = 0; i < socketconnections.length; i++){
      if(socket.id == socketconnections[i]){
        socketconnections.splice(i, 1);
        console.log(socketconnections);
      }
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}