#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('phoeco_matter:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * initialize socket listening, send out board status to clients
 */

var io = require('socket.io').listen(server);
var socketconnections = [];
/**
 *initial board state as represented by an array (length 6) of arrays (length 8)
 */
var gameState = [[[{url:'images/phoecologo.png'}],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]],
  [[],[],[],[],[],[],[],[]]];
/**
 *when a client connects, add its socket id to an array and send the game state to the client
 *If that array already has two socket id's, send the client an error
 */
io.sockets.on('connection', function(socket){
  if(socketconnections.length < 2){
    socketconnections.push(socket.id);
    socket.emit('response', gameState);
  } else {
    var tooManyConnections = {code: 0, message:'We\'re sorry, the room is currently full'};
    socket.emit('oops', tooManyConnections);
  }

/**When the card is moved on a client, check to see if their socket id matches the first client to connect
 *If yes, then set the game state array to the one they sent, then send that updated gamestate to all clients
 *If no, send the client an error and the current gamestate to all clients
 */
  socket.on('sort', function(data){
    console.log(socket.id);
    if(socket.id == socketconnections[0]){
      gameState = data;
      io.emit('response',data);
    } else {
      var notYourTurn = {code: 1, message:'Wait for your turn to begin!'};
      io.emit('response', gameState);
      socket.emit('oops', notYourTurn);
    }
  });
/**
 *When a client disconnects from the server, remove that client's socket id from the array
 */
  socket.on('disconnect', function(){
    for(var i = 0; i < socketconnections.length; i++){
      if(socket.id == socketconnections[i]){
        socketconnections.splice(i, 1);
        console.log(socketconnections);
      }
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
